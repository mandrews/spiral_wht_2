#!/usr/bin/env perl

#
# Copyright (c) 2007 Drexel University
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#


use vars qw/ %opt /;
use Getopt::Std;
use File::Basename qw/ dirname /;

$path       = dirname($0);

$call       = "apply_spiral";
$interface  = "Wht *W, long S, size_t U, wht_value *x";

$opts = 'n:';
getopts($opts, \%opt);

sub usage {
 print "spiral2wht: -n SIZE DIRECTORY\n";
 exit;
}

$size  = $opt{n} || usage;

$code_path = $ARGV[0] || $path;

@files = <$code_path/*.c>;

$codelet = "";

# Find file with appropriate size
foreach $file (@files) {
  open(FD, $file) or die "Could not open $file to read.";
  while ($line = <FD>) {
    if ($line =~ /void WHT_(\d+).*/) {
      if ($size == $1) {
        $codelet = $file;
        last;
      }
    }
  }
  close(FD);
}

if ($codelet eq "") {
  print "Could not find SPIRAL codelet of size $size\n";
  exit;
}

# Convert SPIRAL function to WHT function
open(FD, $codelet) or die "Could not open $codelet to read.";

$call = "$call\_$size";

print <<TEXT
/*
EXTERNS: {
  extern apply_fp $call;
}

STRUCTS: {
#ifdef HAVE_SPIRAL
  CODELET_APPLY_ENTRY("spiral[$size]", $call),
#endif
}
*/
#include "wht.h"

TEXT
;

while ($line = <FD>) {
  next if $line =~ /^#include/; # Skip SPIRAL includes

  if ($line =~ /void WHT_(\d+).*/) {
    $size = $1;
  }

  $line =~ s/void WHT_(\d+).*/void $call($interface) {/;
  $line =~ s/(double)|(float)/wht_value/g;
  $line =~ s/X\[/x\[/g;
  $line =~ s/Y\[/x\[/g;

  print $line;
}

close(FD);

