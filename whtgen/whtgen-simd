#!/usr/bin/env ruby

#
# Copyright (c) 2007 Drexel University
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#


# whtgen-simd
#
# Author: Michael Andrews <mjand@drexel.edu>
#
# TODO increment ref count when tmp is input
#      decrement ref count when tmp is output
#      reuse tmps that have 0 ref count

SCRIPT_NAME     = File.basename(__FILE__)
SCRIPT_PATH     = File.dirname(__FILE__) 
INDENT          = "  "

class Options
  require 'optparse'
  attr_reader :params
  attr_reader :options
  def initialize

    @params = {
      :size             => nil,
      :vector_size      => 1,
      :interleave_by    => 1,
      :aligned          => false,
    }

    @options = OptionParser.new do |o|
      o.banner = "Usage: #{SCRIPT_NAME} [OPTIONS]"
      o.separator ""
      o.on("-h", "--help", 
        "Show this help message.") { puts @options.to_s; exit }

      o.on("-n", "--wht-size=SIZE", Integer,
        "Size of WHT to unroll.") { |x| @params[:size] = x.to_i } 

      o.on("-v", "--vector-size=SIZE", Integer,
        "Vector size.") { |x| @params[:vector_size] = x.to_i }

      o.on("-k", "--interleave-by=FACTOR", Integer,
        "Loop interleaving factor.") { |x| @params[:interleave_by] = x.to_i } 

      o.on("-a", "--aligned", 
        "Access aligned memory, i.e. at unit stride.") { |x| @params[:aligned] = true }

      o.on("-d", "--debug",
        "Turn on debuging.") { $DEBUG = true }

    end
  end
end

def assert
  raise "assert failed" unless yield
end

def log2(n)
  (Math.log(n) / Math.log(2)).to_i
end

def l_mn_m(m,n)
  p = []
  for i in 0 .. (m-1) do
    for j in 0 .. (n-1) do
      p << (j*m)+i
    end
  end
  p
end

def permute(n,m,x,a,s,y,b,t,v,sign)
  p = l_mn_m(n,m)
   
  t1,t2 = mk_tmp(2)
  if v == 2
    @stack.push ShufOp.new(t1,x[a],x[a+s],[0,0],v)
    @stack.push ShufOp.new(t2,x[a],x[a+s],[1,1],v)
  elsif v == 4
    # NOTE these permutations should really be reversed
    # e.g [0,2,0,2] and C sse macro should reverse the ordering
    @stack.push ShufOp.new(t1,x[a],x[a+s],[2,0,2,0],v)
    @stack.push ShufOp.new(t2,x[a],x[a+s],[3,1,3,1],v)
  end
  y[b],y[b+t] = t1,t2
end

def wht_2v(n,x,a,s,y,b,t,v)
  for i in 0 .. (log2(n) - 1) do
    permute(n,2,x,a,s,y,b,t,v,+1)
    wht_2(y,a,s,x,b,t,v)
    y[b],y[b+s] = x[a],x[a+s]
  end
end

def wht_2(x,a,s,y,b,t,v)
  t1,t2 = mk_tmp(2)
  @stack.push AddOp.new(t1,x[a],x[a+s],v)
  @stack.push SubOp.new(t2,x[a],x[a+s],v)
  y[b],y[b+t] = t1,t2
end

def wht(n,x,a,s,y,b,t,v)
  if n < 2 # Transform undefined, just copy input to output
    y[b],y[b+s] = x[a],x[a+s]
  elsif n == 2
    wht_2(x,a,s,y,b,t,v)
  elsif n == 2*v
    wht_2v(n,x,a,s,y,b,t,v)
  else
    z = {}
    m = n/2
    wht(m,x,a,s,z,b,t,v)
    wht(m,x,a+(m/v),s,z,b+(m/v),t,v)

    for i in 0 .. (m/v)-1 do
      wht_2(z,a+i,(m/v)*s,y,b+i,(m/v)*t,v)
    end
  end
end

class GenericOp
  attr_accessor :vsize, :label, :base
end

class BinaryOp < GenericOp
  def initialize(result, left, right, vsize = 1, label = 'ta')
    @result ,@left, @right, @vsize = result, left, right, vsize
    @label = label
  end

  def result
    sprintf "%s%d", @label, @result
  end

  def left
    sprintf "%s%d", @label, @left
  end

  def right
    sprintf "%s%d", @label, @right
  end

  def tmps
    [ result, left, right ]
  end
end

class AddOp < BinaryOp
  def to_s
    if vsize < 2 
      "add(#{result},#{left},#{right});\n"
    else
      "vadd#{vsize}(#{result},#{left},#{right});\n"
    end
  end
end

class SubOp < BinaryOp
  def to_s
    if vsize < 2 
      "sub(#{result},#{left},#{right});\n"
    else
      "vsub#{vsize}(#{result},#{left},#{right});\n"
    end
  end
end

class ShufOp < BinaryOp
  def initialize(result, left, right, pattern, vsize = 1, label = 'ta')
    assert { pattern.size == vsize }

    super(result, left, right, vsize, label)
    @pattern = pattern
  end

  def to_s
    if vsize < 2 
      "/* undefined*/;\n"
    else
      "vshuf#{vsize}(#{result},#{left},#{right},#{@pattern.join(',')});\n"
    end
  end
end

class MemoryOp < GenericOp
  attr_reader :from
  attr_accessor :base_by, :stride_by

  def initialize(into, from, base = 0, stride = 1, vsize = 1, label = 'ta')
    @into, @from, @base, @stride, @vsize = into, from, base, stride, vsize
    @label = label
  end

  def stride
    return "(#{@base} * U) + (#{@stride} * S)" if $DEBUG

    e1 =
    case @base
      when 0
        "0"
      when 1
        "U"
      else
        "#{@base} * U"
    end

    # Replace U in expression and simplify
    e1 = eval e1.gsub(/U/,@base_by.to_s) if @base_by

    e2 =
    case @stride
      when 0
        "0"
      when 1
        "S"
      else
        "#{@stride} * S"
    end

    # Replace S in expression and simplify
    e2 = eval e2.gsub(/S/,@stride_by.to_s) if @stride_by

    e1, e2 = e1.to_s, e2.to_s

    case [e1,e2]
      when ["0", "0"]
        "0"
      when [e1, "0"]
        e1
      when ["0", e2]
        e2
      else
        "(#{e1}) + (#{e2})"
    end
  end

  def into
    sprintf "%s%d", @label, @into
  end

  def tmps
    [ into ]
  end
end

class LoadOp < MemoryOp
  def to_s
    if vsize < 2 
      sprintf "load(%s,%s[%s]);\n", into, from, stride
    else
      sprintf "vload%d(%s,%s[%s]);\n", vsize, into, from, stride
    end
  end
end

class StoreOp < MemoryOp
  def to_s
    if vsize < 2 
      sprintf "store(%s,%s[%s]);\n", into, from, stride 
    else
      sprintf "vstore%d(%s,%s[%s]);\n", vsize, into, from, stride
    end
  end
end

class VectorMemoryOp
  def initialize(ops)
    @ops = ops
  end

  def tmps
    @ops.first.tmps
  end

  def vsize=(v)
    @ops.first.vsize = v
  end

  def to_s
    vsize = @ops.first.vsize
    into  = @ops.first.into
    froms = @ops.collect { |x| sprintf "%s[%s]", x.from, x.stride }
    if @ops.first.kind_of?(LoadOp)
      sprintf "vload%du(%s,%s);\n", vsize, into, froms.join(',')
    else
      sprintf "vstore%du(%s,%s);\n", vsize, into, froms.join(',')
    end
  end
end

class Generator
  attr_accessor :name, :type, :ident

  def initialize(n, vsize = 1, name = "apply_small#{n}", type = "wht_value")
    @n, @vsize, @name, @type = n, vsize, name, type
    @stack  = []
    @tmp    = 0
    @guards = [ "(#{log2(@n)} <= WHT_MAX_UNROLL)" ]

    run
  end

  def mk_tmp(k=1)
    return @tmp += 1 unless k > 1

    a = []
    k.times do
      a << @tmp += 1
    end
    a
  end

  def to_s
    body = ""
    tmps = []

    @stack.each do |x|
      body += INDENT + x.to_s
      tmps += x.tmps
    end

    # Declarations of temporary registers
    decls = ""
    tmps.uniq.each do |tmp|
      decls += sprintf "%s%s %s;\n", INDENT, @type, tmp
    end

    guard  = @guards.join(" && ") 

    return <<EOF
/* This file has been automatically generated by whtgen/whtgen-simd. */

/*
EXTERNS: {
  extern apply_fp #{@name};
}

STRUCTS: {
#if (#{guard})
  CODELET_APPLY_ENTRY("#{ident}", #{@name}),
#endif
 }
*/

#include "wht.h"
#include "simd.h"

void #{@name}(Wht *W, long S, long U, wht_value *x)
{
#if (#{guard})
#{decls}
#{body}
#else
  wht_exit("initialization guards should prevent this message");
#endif
}
EOF
  end

  def run
    x = {}
    y = {}

    @n.times do |i| 
      t = mk_tmp
      x[i] = t
      @stack.push  LoadOp.new(t,"x", 0, (i*@vsize), @vsize)
    end

    wht(@n*@vsize,x,0,1,y,0,1,@vsize)

    @n.times do |i| 
      t = y[i] 
      @stack.push StoreOp.new(t,"x", 0, (i*@vsize), @vsize)
    end

  end

  # Transforms

  def interleave(factor)
    stack = []
    @stack.each do |x|
      stack << x.clone
      base, label = 0, x.label
      for k in 1 .. factor - 1 do # Make factor copies
        y = x.clone

        base, label = base + 1, label.succ # Increment base and label

        y.base, y.label = base, label

        stack << y
      end
    end
    @stack = stack

    @guards << "(#{factor} <= WHT_MAX_INTERLEAVE)"
  end

  def group(factor, unaligned = false)
    stack = []
    copy  = @stack.dup
    until copy.empty?
      x = copy.shift
      if x.kind_of? MemoryOp and unaligned
        vector = [x]
        (factor - 1).times { 
          vector << copy.shift 
        }
        stack << VectorMemoryOp.new(vector)
      else
        stack << x
        (factor - 1).times {
          copy.shift
        }
      end
    end
    @stack = stack
  end

  def vectorize(factor)
    @stack.each { |x| x.vsize = factor }
    @guards << "(#{factor} == WHT_VECTOR_SIZE)" 
  end

  def align_base
    @stack.each { |x| x.base_by = 1 if x.kind_of?(MemoryOp) }
  end

  def align_stride
    @stack.each { |x| x.stride_by = 1 if x.kind_of?(MemoryOp) }
  end

end

def die(msg)
  puts msg
  exit
end

def parse_opts(opts, args)
  begin
    opts.options.parse!(args)
  rescue => e
    die(e.message)
  end
end

def check_opts(opts)
  die(" -n SIZE required") unless opts.params[:size]

  n = 2**opts.params[:size]
  k = opts.params[:interleave_by] 
  v = opts.params[:vector_size]

  unless n*k > v
    die("SIZE x INTERLEAVED_BY must be greater than VECTOR_SIZE")
  end

  if k != 1 and k < v
    die("INTERLEAVED_BY must be greater than or equal to VECTOR_SIZE")
  end

end

# Main entry point 
if $0 == __FILE__ 
  opts = Options.new

  parse_opts(opts, ARGV)

  m = opts.params[:size]
  v = opts.params[:vector_size]
  k = opts.params[:interleave_by]
  a = opts.params[:aligned] 

  check_opts(opts)

  n = 2**m

  mode, np, vp = :identity, n, v

  if v > 1 and k > 1 and not a
    mode, vp = :general_vectorize, 1
  elsif v > 1 and k > 1 
    mode, vp = :topmost_vectorize, 1
  elsif v > 1
    mode, np = :right_vectorize, (2**m) / v
  elsif k > 1
    mode = :interleave
  end

  g = Generator.new(np,vp)

  case mode
    when :general_vectorize
      g.name  = "apply_small#{m}_v#{v}_il#{k}"
      g.ident = "smallv(#{v},#{k},0)[#{m}]"
      g.type  = "wht_vector#{v}"
      g.interleave(k)
      g.group(v,true)
      g.vectorize(v)
    when :topmost_vectorize
      g.name  = "apply_small#{m}_v#{v}_il#{k}_a"
      g.ident = "smallv(#{v},#{k},1)[#{m}]"
      g.type  = "wht_vector#{v}"
      g.interleave(k)
      g.group(v)
      g.vectorize(v)
      g.align_base 
    when :right_vectorize
      g.name  = "apply_small#{m}_v#{v}_a"
      g.ident = "smallv(#{v})[#{m}]"
      g.type  = "wht_vector#{v}"
      g.vectorize(v)
      g.align_stride
    when :interleave
      g.name  = "apply_small#{m}_il#{k}"
      g.ident = "smallil(#{k})[#{m}]"
      g.interleave(k)
    else
      g.name  = "apply_small#{m}"
      g.ident = "small[#{m}]"
  end

  puts g
end
