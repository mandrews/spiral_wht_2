/**
\page codelet_extension Adding a new Codelet to the Package

Codelets do most of the computation in the package, and are usually optimized
for a specific size of transform.
This forces most codelets to be 
generated by a code generator but this is not a requirement.  All codelets in
the system need to implement the \ref apply_fp interface, and require special
metadata to be registered in the system.

\see whtgen.c 

To add a new codelet (assuming there is a code generator):
-# Place the code generator in the whtgen directory.
It should take as a parameter at
least the size of the transform, and output the generated code to \c stdout.
Also the \c EXTERNS and \c STRUCTS metadata (below) needs to be associated with the codelet.
Example using builtin code generator:
\verbatim
whtgen/whtgen -n 1
\endverbatim
\code
/* This file has been automatically generated by whtgen/whtgen.c. */

/*
EXTERNS: {
  extern codelet_apply_fp apply_small1;
}
STRUCTS: {
#if (1 <= WHT_MAX_UNROLL)
  CODELET_APPLY_ENTRY("small[1]", apply_small1),
#endif
}
*/

#include "wht.h"

void apply_small1(Wht *W, long S, long U, wht_value *x)
{
#if (1 <= WHT_MAX_UNROLL)
  wht_value a, b;
  a = x[0 * S];
  b = x[1 * S];
  x[0 * S] = a + b;
  x[1 * S] = a - b;
#else
   wht_exit("runtime guards should prevent this message");
#endif
}
\endcode
-# Create a shell script to enumerate all codelets (for instance
\ref make_small_codelets_sh).  This script should be called before
\ref register_codelets_pl in \ref wht_codelets_Makefile_am.
-# This codelet can be retreived as a function pointer by calling
\ref codelet_apply_lookup.  Typically, this is done within a %rule function
implementing \ref rule_fp

*/
