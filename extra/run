#!/usr/bin/env ruby

# e1
#
# Author: Michael Andrews <mjand@drexel.edu>
# $Id$

def mymeasure(plan, metric, args)
  values = `#{MEASURE_PATH}/wht_measure -w '#{plan}' -e PAPI -m #{metric} -s #{args}`.split
  values.map { |x| x.to_f }
end

def random(size,a,b,p,q)
  `#{RANDTREE_PATH}/wht_randtree -n #{size} -a #{a} -b #{b} -p #{p} -q #{q}`.chomp
end

def convert(plan, args)
  `#{CONVERT_PATH}/wht_convert -w '#{plan}' #{args}`.chomp
end

def classify(plan, args = nil)
  `#{CLASSIFY_PATH}/wht_classify -w '#{plan}' #{args}`.chomp
end

def generate(plans, o)
  # TODO select plans with no transform
  return if plans.size >= o['samples']

  n, a,b,p,q = o['size'], o['min_f'], o['max_f'], o['min_e'], o['max_e']

  for oid in 0 .. o["samples"]
    plan = random(n,a,b,p,q)
    key = [oid, plan, 'none'].join(': ')
    plans[key] = { 
      'oid'       => oid,
      'plan'      => plan,
      'transform' => 'none'
    }
  end
end

def transform(plans, o)
  tmp = plans.dup

  plans.each do |key, node|
    index = key.split(/\s*:\s*/)

    oid  = index[0]
    plan = index[1]
    prev = index[2]

    next unless prev == 'none'

    o['transforms'].each do |name, args|
      new_plan = convert(plan, args)
      new_key  = [oid, new_plan, name].join(': ')
      tmp[new_key] = {
        'oid'       => oid,
        'plan'      => new_plan,
        'transform' => name
      }
    end
  end

  plans.merge!(tmp)
end

def test(plans, o)
  plans.each do |key, node|
    index = key.split(/\s*:\s*/)

    plan = index[1]

    o['metrics'].each do |metric, params|
      next if o['no_update'] and node.has_key?("#{metric}_mean")

      value = mymeasure(plan, metric, params)
      node["#{metric}_mean" ]    = value[0]
      node["#{metric}_stdev" ]   = value[1]
      node["#{metric}_samples" ] = value[2].to_i

      print '.'
      $stdout.flush
    end
  end

  puts "\ndone"
end

#def ic(model)
#  def open_pipe
#    close_pipe
#    puts "exec #{IC_PATH}/ic"
#    @pipe = IO.popen("#{IC_PATH}/ic", mode = 'r+')
#  end
#
#  def close_pipe
#    @pipe.close unless @pipe.nil? or @pipe.closed?
#  end
#
#  @pipe = open_pipe
#
#  begin
#    model.each do |key, node|
#      next if node.has_key?('IC_Model')
#      plan, m = key
#      @pipe.puts(plan + "\n")
#      @pipe.flush
#      value = @pipe.gets
#      node['IC_Model'] = value.chomp.to_i
#    end
#  rescue Errno::EPIPE
#    open_pipe
#    retry
#  ensure
#    close_pipe
#  end
#end


def time(&blk)
  t0 = Time.now
  yield
  t1 = Time.now
  puts t1 - t0
end

def die
  puts "run: FILE MODE"
  exit 1
end

require 'utils'

if $0 == __FILE__
  die if ARGV.size < 3

  opts = load_json(ARGV[0], {})

  file = ARGV[1]
  mode = ARGV[2]

  info, data = nil, nil

  env = load_runtime_env

  time {
  time {
    puts "Loading ..."
  }

  info, data = load_data(file, env)

  puts mode

  time {
    case mode
      when 'Generate'
        generate(data, opts)
      when 'Transform'
        transform(data, opts)
      when 'Test'
        test(data, opts)
      else
        puts "mode #{mode} undefined"
    end
  }

  time {
    puts "Saving ..."
    save_data(file, env, data, info)
  }
    puts "Total"
  }
end

