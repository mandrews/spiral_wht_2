#!/usr/bin/env ruby

# wht_dp
#
# Author: Michael Andrews <mjand@drexel.edu>
# $Id$
#
# TODO
#   - Flag for selecting rightmost subspace
#   - Input for selecting possible transforms

SCRIPT_PATH       = File.dirname(__FILE__) 
SCRIPT_NAME       = 'wht_dp'
DEFAULT_PARAMS    = {
  :min_size       => 1,
  :max_size       => 15,
  :max_children   => 2,
  :measure        => SCRIPT_PATH + '/wht_measure',
  :best_trees     => SCRIPT_PATH + '/../share/wht_best_trees.txt'
}

$LOAD_PATH << "#{SCRIPT_PATH}/../extra"

require "utils"

class Options
  require 'optparse'
  attr_reader :params
  def initialize
    @params  = DEFAULT_PARAMS
    @options = OptionParser.new do |o|
      o.banner = "Usage: #{SCRIPT_NAME} [OPTIONS]"
      o.separator ""
      o.on("-h", "--help", 
        "Show this help message.") { 
        die }

      o.on("-v", "--verbose", 
        "Show non-essential information.") {
        @params[:verbose] = true }

      o.on("-a", "--min-size=SIZE", Integer,
        "Start the search at size 2^SIZE.") { |x|
        @params[:min_size] = x }

      o.on("-b", "--max-size=SIZE", Integer,
        "Stop the search at size 2^SIZE.") { |x|
        @params[:max_size] = x }

      o.on("-k", "--max-children=CHILDREN", Integer,
        "Maximum number of children to allow on a split node.") { |x|
        @params[:max_children] = x }

      o.on("-m", "--wht-measure=FILE", 
        "Program to measure peformance of WHT tree.") { |x|
         @params[:measure] = x }

      o.on("-f", "--wht-best-trees=FILE", String,
        "File to load/store the best trees found by dynamic programming.") { |x|
         @params[:best_trees] = x }
    end
  end

  def die(msg = nil)
    puts @options.to_s 
    puts "\n#{msg}" unless msg.nil?
    exit
  end

  def parse(args)
    begin
      @options.parse!(args)
    rescue => e
      die(e.message)
    end
  end

end

class Search
  INF = 1.0 / 0.0
  attr_accessor :best
  attr_accessor :debug
  def initialize(params)
    @min_size       = params[:min_size]
    @max_size       = params[:max_size]
    @max_children   = params[:max_children]
    @measure        = params[:measure]
    @il_max         = params[:il_max]
    @vsize          = params[:vsize]
    @max_leaf       = params[:max_leaf]
    @debug          = params[:debug]

    @best = {}

    for size in 1 .. @max_size do 
      @best[size.to_s] ||= { 'time' => INF, 'plan' => nil }
    end
  end

  def best=(map)
    map.each do |k,v|
      @best[k] = map[k]
    end
  end

  def run
    for size in @min_size .. @max_size do 
      puts "size #{size}" if @debug
      find(size)
    end
  end

  def measure(plan)
    cmd = "#{@measure} -w '#{plan}'"
    puts "Executing #{cmd}" if @debug
    t = 0
    IO.popen(cmd) do |fd|
      t = fd.gets
    end

    unless t 
      puts("Could not read: #{cmd}") if @debug
      return INF
    else
      t.to_f
    end
  end

  def find(size)
    plans = []

    g_cp_n(size, 1, @max_children) do |zp|
      next if zp.first == size and size > @max_leaf

      right = right_codelets(zp.pop,size)
      next if right.nil? or right.empty? 

      lefts = []
      zp.each_with_index do |z,i|
        k = size_of_right_tree(zp,i+1)
        lefts << left_codelets(z,size,k)
      end

      if lefts.empty? # Basecase
        plans += right
        next
      end

      lefts << right

      combinations(lefts).each do |x|
        split_codelets.each do |s|
          plans << "#{s}[#{x.join(',')}]"
        end
      end

    end

    plans.each do |p|
      t  = measure(p)
      tp = @best[size.to_s]['time']
      if t < tp
        puts "New Best for #{size} with T=#{t} (T'=#{tp}): #{p}"
        @best[size.to_s]['time'] = t
        @best[size.to_s]['plan'] = p
      end
    end
  end

  def find_best(size)
    unless @best[size.to_s]['plan']
      find(size)
    end
    @best[size.to_s]['plan']
  end


  # TODO These should be read in by a user configured file
  def left_codelets(size, n, m)
    return [] if size < 2

    lefts = []
    best = leftify(find_best(size))
    lefts << best if best
    return lefts if size > @max_leaf

    lefts << "small[#{size}]"

    il_max = [n, @il_max, m, size].min 
    for k in 1 .. il_max do
      lefts << "smallil(#{2**k})[#{size}]"
      next unless @vsize > 0 and 2**k >= @vsize
      lefts << "smallv(#{@vsize},#{2**k})[#{size}]"
    end
    lefts.uniq
  end

  def right_codelets(size,n)
    return [find_best(size)] if n > @max_leaf

    rights = [ "small[#{size}]" ]
    if @vsize > 0 and 2**size > @vsize
      rights << "smallv(#{@vsize})[#{size}]"
    end
    rights.uniq
  end

  def split_codelets
    @il_max > 1 ? ["splitil"] : [ "split" ] 
  end

  def leftify(codelet)
    return unless codelet
    codelet.gsub(/smallv\((\d)\)\[(\d)\]/) { |x| "small[#{$2}]" }
  end

  def size_of_right_tree(zp,n)
    v = 0
    zp.reverse.each_with_index do |x,i|
      break if n >= (zp.size - i)
      v += x
    end
    v
  end

end

def combinations(a)
  return a.first if a.size == 1

  h = a.shift
  t = combinations(a)

  all = []
  t.each do |y|
    h.each do |x|
      if y.class == Array
        all << [x] + y
      else
        all << [x] + [y]
      end
    end
  end

  all
end

# To generate compositions with elements >= MIN
#   1) verify that MIN | n i.e n % min == 0
#   2) set m = n / MIN, and generate compositions
#   3) multiply each m_i by MIN
#
# Similarly for elements <= MAX

# Generate (enumerate) all k combinations of n
# See http://home.att.net/~srschmitt/script_combinations.html
def g_k_cb_n(n,k)
  a = (1..k).to_a

  loop do
    yield a

    i = k - 1
    while a[i] == (n - k + i + 1) do
      i -= 1
    end

    return if (i < 0)

    a[i] += 1

    for j in i+1 .. k-1 do
      a[j] = a[i] + j - i
    end
  end
end

# Map a combination to a composition
# Idea from Dr. Johnson
# see http://en.wikipedia.org/wiki/Combinadic
def map_cb_to_cp(n, cb)
  m, i = 0, 0
  cp = Array.new(cb.size)
  cb.each do |x|
    cp[i] = x - m
    m = x
    i += 1
  end
  cp[i] = n - m
  cp
end

# Generate (enumerate) all k-way compositions of n forall k in a..b
def g_cp_n(n, a, b)
  max = [n, b].min
  a.upto(max) do |k|
    g_k_cb_n(n-1,k-1) do |cb|
      yield map_cb_to_cp(n,cb)
    end
  end
end

if $0 == __FILE__ # Main Entry Point
  opts = Options.new
  opts.parse(ARGV)

  unless File.exists?(opts.params[:measure].split.first)
    opts.die("Could find measure #{opts.params[:measure]}")
  end

  env = load_runtime_env

  dp = Search.new(
    { :min_size       => opts.params[:min_size],
      :max_size       => opts.params[:max_size],
      :max_children   => opts.params[:max_children],
      :max_leaf       => env['max_unroll'],
      :il_max         => env['max_interleave'],
      :vsize          => env['vector_size'],
      :debug          => opts.params[:verbose],
      :measure        => opts.params[:measure],
    } )

  best_trees = opts.params[:best_trees] 

  info, trees = load_data(best_trees, env)

  dp.best = trees

  dp.run

  save_data(best_trees, env, dp.best, info)
end

