#!/usr/bin/env ruby

# dp
#
# Author: Michael Andrews <mjand@drexel.edu>
# $Id$

SCRIPT_PATH       = File.dirname(__FILE__) 
SCRIPT_NAME       = 'wht_dp'
DEFAULT_PARAMS    = {
  :min_size       => 1,
  :max_size       => 15,
  :max_children   => 2,
  :measure        => SCRIPT_PATH + '/wht_measure',
  :best_trees     => SCRIPT_PATH + '/../share/wht_best_trees.txt'
}

class Options
  require 'optparse'
  attr_reader :params
  def initialize
    @params  = DEFAULT_PARAMS
    @options = OptionParser.new do |o|
      o.banner = "Usage: #{SCRIPT_NAME} [OPTIONS]"
      o.separator ""
      o.on("-h", "--help", 
        "Show this help message.") { 
        die }

      o.on("-v", "--verbose", 
        "Show non-essential information.") {
        @params[:verbose] = true }

      o.on("-a", "--min-size=SIZE", Integer,
        "Start the search at size 2^SIZE.") { |x|
        @params[:min_size] = x }

      o.on("-b", "--max-size=SIZE", Integer,
        "Stop the search at size 2^SIZE.") { |x|
        @params[:max_size] = x }

      o.on("-k", "--max-children=CHILDREN", Integer,
        "Maximum number of children to allow on a split node.") { |x|
        @params[:max_children] = x }

      o.on("-m", "--wht-measure=FILE", 
        "Program to measure peformance of WHT tree.") { |x|
         @params[:measure] = x }

      o.on("-f", "--wht-best-trees=FILE", String,
        "File to load/store the best trees found by dynamic programming.") { |x|
         @params[:best_trees] = x }
    end
  end

  def die(msg = nil)
    puts @options.to_s 
    puts "\n#{msg}" unless msg.nil?
    exit
  end

  def parse(args)
    begin
      @options.parse!(args)
    rescue => e
      die(e.message)
    end
  end

end

require 'yaml'

def load_runtime_env(measure)
  cmd = "#{measure} -v"
  env = {}
  IO.popen(cmd) do |fd|
    while (line = fd.gets) do
      line.chomp!
      case line
        when /^max_unroll:\s*(\d+)/
          env['max_unroll'] = $1.to_i
        when /^max_interleave:\s*(\d+)/
          env['max_interleave'] = $1.to_i
        when /^vector_size:\s*(\d+)/
          env['vector_size'] = $1.to_i
        when /^CC:\s*(.*)$/
          env['compiler'] = $1.to_s
        when /^type:\s*(.*)$/
          env['type'] = $1.to_s
        when /^CFLAGS:\s*(.*)$/
          env['compiler_flags'] = $1.to_s
      end
    end
  end
  env
end

def load_entry(env,info)
  info.each do |e|
    return e if e['env'] == env
  end

  # Add a new entry
  entry = {
    'env'   => env,
    'data'  => {}
  }

  info << entry

  entry
end

def load_best_trees(file, env)
  unless File.exists?(file)
    return [ [], {} ] # i.e. empty info and trees
  end

  info = []

  File.open(file,'r') do |fd|
    begin
      info = YAML::load_stream(fd).documents[0]
    rescue => e 
      puts e.message
      return [ [], {} ]
    end
  end

  trees = load_entry(env, info)['data']

  [info, trees]

end

def save_best_trees(file, env, trees, info)
  load_entry(env,info)['data'] = trees

  File.open(file,'w+') do |fd|
    YAML::dump(info, fd)
  end
end

class Search
  INF = 1.0 / 0.0
  attr_accessor :best
  attr_accessor :debug
  def initialize(params)
    @min_size       = params[:min_size]
    @max_size       = params[:max_size]
    @max_children   = params[:max_children]
    @measure        = params[:measure]
    @il_max         = params[:il_max]
    @vsize          = params[:vsize]
    @max_leaf       = params[:max_leaf]
    @debug          = params[:debug]

    @best = {}

    for size in 1 .. @max_size do 
      @best[size] ||= { 'time' => INF, 'plan' => nil }
    end

  end

  def run
    for size in @min_size .. @max_size do 
      puts "size #{size}" if @debug
      find(size)
    end
  end

  def measure(plan)
    cmd = "#{@measure} -w '#{plan}'"
    t = 0
    IO.popen(cmd) do |fd|
      t = fd.gets
    end

    unless t 
      puts("Could not read: #{cmd}") if @debug
      return INF
    else
      t.to_f
    end
  end

  def find(size)
    plans = []

    zs1(size) do |zp|
      next if zp.first == size and size > @max_leaf
      next if zp.length > @max_children

      right = right_codelets(zp.pop,size)
      next if right.nil? or right.empty? 

      lefts = []
      zp.each_with_index do |z,i|
        k = size_of_right_tree(zp,i+1)
        lefts << left_codelets(z,size,k)
      end

      if lefts.empty? # Basecase
        plans += right
        next
      end

      lefts << right

      combinations(lefts).each do |x|
        split_codelets.each do |s|
          plans << "#{s}[#{x.join(',')}]"
        end
      end

    end

    plans.each do |p|
      t  = measure(p)
      tp = @best[size]['time']
      if t < tp
        puts "New Best for #{size} with T=#{t} (T'=#{tp}): #{p}"
        @best[size]['time'] = t
        @best[size]['plan'] = p
      end
    end
  end

  def find_best(size)
    unless @best[size]['plan']
      find(size)
    end
    @best[size]['plan']
  end


  # TODO These should be read in by a user configured file
  def left_codelets(size, n, m)
    return [] if size < 2

    lefts = []
    best = leftify(find_best(size))
    lefts << best if best
    return lefts if size > @max_leaf

    lefts << "small[#{size}]"

    il_max = [n, @il_max, m, size].min 
    for k in 1 .. il_max do
      lefts << "smallil(#{2**k})[#{size}]"
      next unless @vsize > 0 and 2**k >= @vsize
      lefts << "smallv(#{@vsize},#{2**k})[#{size}]"
    end
    lefts.uniq
  end

  def right_codelets(size,n)
    return [find_best(size)] if n > @max_leaf

    rights = [ "small[#{size}]" ]
    if @vsize > 0 and 2**size > @vsize
      rights << "smallv(#{@vsize})[#{size}]"
    end
    rights.uniq
  end

  def split_codelets
    [ "split" ]
  end

  def leftify(codelet)
    return unless codelet
    codelet.gsub(/smallv\((\d)\)\[(\d)\]/) { |x| "small[#{$2}]" }
  end

  def size_of_right_tree(zp,n)
    v = 0
    zp.reverse.each_with_index do |x,i|
      break if n >= (zp.size - i)
      v += x
    end
    v
  end

end

# ZS1 algorithm
#
# Returns integer paritions of n in anti-lexographic order, i.e. n first
#
# This corresponds to right most WHT trees
#
#@article{zs1
#  author = {Zoghbi, Antoine   and Stojmenovi{\'c}, Ivan  },
#  journal = {International Journal of Computer Mathematics},
#  keywords = {combinatorics computerscience partitions},
#  number = {2},
#  pages = {319--332},
#  title = {Fast algorithms for generating integer partitions},
#  url = {http://www.site.uottawa.ca/~ivan/F49-int-part.pdf},
#  volume = {70},
#  year = {1998}
#}
def zs1(n)
  x = []

  for i in 1 .. n do
    x[i] = 1
  end

  x[1] = n
  m,h = 1,1
  yield [x[1]]

  while x[1] != 1 do
    if x[h] == 2
      m, x[h], h = m + 1, 1, h - 1
    else
      r = x[h] - 1
      t, x[h] = m - h + 1, r
      while t >= r do
        h = h + 1
        x[h], t = r, t - r
      end
      if t == 0 
        m = h
      else
        m = h + 1
        if t > 1
          h = h + 1
          x[h] = t
        end
      end
    end

    yield x[1..m]
  end
end

def combinations(a)
  return a.first if a.size == 1

  h = a.shift
  t = combinations(a)

  all = []
  t.each do |y|
    h.each do |x|
      if y.class == Array
        all << [x] + y
      else
        all << [x] + [y]
      end
    end
  end

  all
end

if $0 == __FILE__ # Main Entry Point
  opts = Options.new
  opts.parse(ARGV)

  env = load_runtime_env(opts.params[:measure])

  dp = Search.new(
    { :min_size       => opts.params[:min_size],
      :max_size       => opts.params[:max_size],
      :max_children   => opts.params[:max_children],
      :max_leaf       => env['max_unroll'],
      :il_max         => env['max_interleave'],
      :vsize          => env['vector_size'],
      :debug          => opts.params[:verbose],
      :measure        => opts.params[:measure],
    } )

  best_trees = opts.params[:best_trees] 

  info, trees = load_best_trees(best_trees, env)

  dp.best.merge!(trees)

  dp.run

  save_best_trees(best_trees, env, dp.best, info)
end

